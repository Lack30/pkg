// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/lack-io/vine/testdata/zfs/proto/zfs.proto

package zfs

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecvRequest struct {
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Length int64  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Chunk  []byte `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Done   bool   `protobuf:"varint,4,opt,name=done,proto3" json:"done,omitempty"`
}

func (m *RecvRequest) Reset()         { *m = RecvRequest{} }
func (m *RecvRequest) String() string { return proto.CompactTextString(m) }
func (*RecvRequest) ProtoMessage()    {}
func (*RecvRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c41eb384c0ad8f1b, []int{0}
}
func (m *RecvRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecvRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecvRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecvRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvRequest.Merge(m, src)
}
func (m *RecvRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecvRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecvRequest proto.InternalMessageInfo

func (m *RecvRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *RecvRequest) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *RecvRequest) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *RecvRequest) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type RecvResponse struct {
}

func (m *RecvResponse) Reset()         { *m = RecvResponse{} }
func (m *RecvResponse) String() string { return proto.CompactTextString(m) }
func (*RecvResponse) ProtoMessage()    {}
func (*RecvResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c41eb384c0ad8f1b, []int{1}
}
func (m *RecvResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecvResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecvResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecvResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvResponse.Merge(m, src)
}
func (m *RecvResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecvResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecvResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RecvRequest)(nil), "zfs.RecvRequest")
	proto.RegisterType((*RecvResponse)(nil), "zfs.RecvResponse")
}

func init() {
	proto.RegisterFile("github.com/lack-io/vine/testdata/zfs/proto/zfs.proto", fileDescriptor_c41eb384c0ad8f1b)
}

var fileDescriptor_c41eb384c0ad8f1b = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x73, 0x24, 0x14, 0x30, 0x15, 0x02, 0x0b, 0xa1, 0x88, 0xc1, 0x8a, 0x3a, 0x79, 0x69,
	0x2c, 0x01, 0x03, 0x33, 0x8f, 0x60, 0x9e, 0xc0, 0x4d, 0xaf, 0x4e, 0xd4, 0x62, 0x97, 0xf8, 0xd2,
	0xa1, 0x4f, 0xc1, 0x63, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0x54, 0x49, 0x3a, 0x74, 0xfb, 0xbe,
	0xff, 0x74, 0xba, 0xff, 0xd8, 0x9b, 0xad, 0xa8, 0x6c, 0x16, 0x79, 0xe1, 0xbf, 0xd4, 0xc6, 0x14,
	0xeb, 0x79, 0xe5, 0xd5, 0xae, 0x72, 0xa8, 0x08, 0x03, 0x2d, 0x0d, 0x19, 0xb5, 0x5f, 0x05, 0xb5,
	0xad, 0x3d, 0xf9, 0x9e, 0xf2, 0x81, 0x78, 0xbc, 0x5f, 0x85, 0x99, 0x65, 0xb7, 0x1a, 0x8b, 0x9d,
	0xc6, 0xef, 0x06, 0x03, 0xf1, 0x27, 0x36, 0x21, 0x53, 0x5b, 0xa4, 0x14, 0x32, 0x90, 0x37, 0xfa,
	0x64, 0x7d, 0xbe, 0x41, 0x67, 0xa9, 0x4c, 0x2f, 0x32, 0x90, 0xb1, 0x3e, 0x19, 0x7f, 0x64, 0x97,
	0x45, 0xd9, 0xb8, 0x75, 0x1a, 0x67, 0x20, 0xa7, 0x7a, 0x14, 0xce, 0x59, 0xb2, 0xf4, 0x0e, 0xd3,
	0x24, 0x03, 0x79, 0xad, 0x07, 0x9e, 0xdd, 0xb1, 0xe9, 0x78, 0x28, 0x6c, 0xbd, 0x0b, 0xf8, 0xf2,
	0xce, 0xae, 0x3e, 0xc9, 0xd7, 0xc6, 0x22, 0x9f, 0xb3, 0xa4, 0x1f, 0xf1, 0xfb, 0xbc, 0x2f, 0x77,
	0x56, 0xe7, 0xf9, 0xe1, 0x2c, 0x19, 0xf7, 0x24, 0x7c, 0xa4, 0xbf, 0xad, 0x80, 0x43, 0x2b, 0xe0,
	0xbf, 0x15, 0xf0, 0xd3, 0x89, 0xe8, 0xd0, 0x89, 0xe8, 0xaf, 0x13, 0xd1, 0x62, 0x32, 0x3c, 0xf6,
	0x7a, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x89, 0x9c, 0xda, 0xeb, 0x10, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	Recv(ctx context.Context, opts ...grpc.CallOption) (Storage_RecvClient, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Recv(ctx context.Context, opts ...grpc.CallOption) (Storage_RecvClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[0], "/zfs.Storage/Recv", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageRecvClient{stream}
	return x, nil
}

type Storage_RecvClient interface {
	Send(*RecvRequest) error
	CloseAndRecv() (*RecvResponse, error)
	grpc.ClientStream
}

type storageRecvClient struct {
	grpc.ClientStream
}

func (x *storageRecvClient) Send(m *RecvRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageRecvClient) CloseAndRecv() (*RecvResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecvResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	Recv(Storage_RecvServer) error
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) Recv(srv Storage_RecvServer) error {
	return status.Errorf(codes.Unimplemented, "method Recv not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_Recv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).Recv(&storageRecvServer{stream})
}

type Storage_RecvServer interface {
	SendAndClose(*RecvResponse) error
	Recv() (*RecvRequest, error)
	grpc.ServerStream
}

type storageRecvServer struct {
	grpc.ServerStream
}

func (x *storageRecvServer) SendAndClose(m *RecvResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageRecvServer) Recv() (*RecvRequest, error) {
	m := new(RecvRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zfs.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Recv",
			Handler:       _Storage_Recv_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/lack-io/vine/testdata/zfs/proto/zfs.proto",
}

func (m *RecvRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecvRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Done {
		i--
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintZfs(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Length != 0 {
		i = encodeVarintZfs(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintZfs(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecvResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecvResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintZfs(dAtA []byte, offset int, v uint64) int {
	offset -= sovZfs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecvRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovZfs(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovZfs(uint64(m.Length))
	}
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovZfs(uint64(l))
	}
	if m.Done {
		n += 2
	}
	return n
}

func (m *RecvResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovZfs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZfs(x uint64) (n int) {
	return sovZfs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecvRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZfs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipZfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZfs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZfs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZfs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZfs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZfs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZfs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZfs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZfs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZfs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZfs = fmt.Errorf("proto: unexpected end of group")
)
