// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/lack-io/vine/testdata/zfs/proto/zfs.proto

package zfs

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	api "github.com/lack-io/vine/proto/apis/api"
	api1 "github.com/lack-io/vine/service/api"
	client "github.com/lack-io/vine/service/client"
	server "github.com/lack-io/vine/service/server"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ api1.Option
var _ context.Context
var _ client.Option
var _ server.Option

// API Endpoints for Storage service
func NewStorageEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Storage service
type StorageService interface {
	Recv(ctx context.Context, opts ...client.CallOption) (Storage_RecvService, error)
}

type storageService struct {
	c    client.Client
	name string
}

func NewStorageService(name string, c client.Client) StorageService {
	return &storageService{
		c:    c,
		name: name,
	}
}

func (c *storageService) Recv(ctx context.Context, opts ...client.CallOption) (Storage_RecvService, error) {
	req := c.c.NewRequest(c.name, "Storage.Recv", &RecvRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &storageServiceRecv{stream}, nil
}

type Storage_RecvService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseAndRecv() (*RecvResponse, error)
	Send(*RecvRequest) error
}

type storageServiceRecv struct {
	stream client.Stream
}

func (x *storageServiceRecv) CloseAndRecv() (*RecvResponse, error) {
	if err := x.stream.Close(); err != nil {
		return nil, err
	}
	r := new(RecvResponse)
	err := x.RecvMsg(r)
	return r, err
}

func (x *storageServiceRecv) Context() context.Context {
	return x.stream.Context()
}

func (x *storageServiceRecv) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageServiceRecv) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageServiceRecv) Send(m *RecvRequest) error {
	return x.stream.Send(m)
}

// Server API for Storage service
type StorageHandler interface {
	Recv(context.Context, Storage_RecvStream) error
}

func RegisterStorageHandler(s server.Server, hdlr StorageHandler, opts ...server.HandlerOption) error {
	type storageImpl interface {
		Recv(ctx context.Context, stream server.Stream) error
	}
	type Storage struct {
		storageImpl
	}
	h := &storageHandler{hdlr}
	return s.Handle(s.NewHandler(&Storage{h}, opts...))
}

type storageHandler struct {
	StorageHandler
}

func (h *storageHandler) Recv(ctx context.Context, stream server.Stream) error {
	return h.StorageHandler.Recv(ctx, &storageRecvStream{stream})
}

type Storage_RecvStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	SendAndClose(*RecvResponse) error
	Recv() (*RecvRequest, error)
}

type storageRecvStream struct {
	stream server.Stream
}

func (x *storageRecvStream) SendAndClose(in *RecvResponse) error {
	if err := x.SendMsg(in); err != nil {
		return err
	}
	return x.stream.Close()
}

func (x *storageRecvStream) Context() context.Context {
	return x.stream.Context()
}

func (x *storageRecvStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *storageRecvStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *storageRecvStream) Recv() (*RecvRequest, error) {
	m := new(RecvRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
