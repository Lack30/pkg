// Copyright 2021 lack
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/lack-io/pkg/zfs/generated.proto

package zfs

import (
	fmt "fmt"

	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *Pool) Reset()      { *m = Pool{} }
func (*Pool) ProtoMessage() {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d777e330b1b731b, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Snapshot) Reset()      { *m = Snapshot{} }
func (*Snapshot) ProtoMessage() {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d777e330b1b731b, []int{1}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Volume) Reset()      { *m = Volume{} }
func (*Volume) ProtoMessage() {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d777e330b1b731b, []int{2}
}
func (m *Volume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return m.Size()
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Pool)(nil), "github.com.lack_io.pkg.zfs.Pool")
	proto.RegisterType((*Snapshot)(nil), "github.com.lack_io.pkg.zfs.Snapshot")
	proto.RegisterType((*Volume)(nil), "github.com.lack_io.pkg.zfs.Volume")
}

func init() {
	proto.RegisterFile("github.com/lack-io/pkg/zfs/generated.proto", fileDescriptor_0d777e330b1b731b)
}

var fileDescriptor_0d777e330b1b731b = []byte{
	// 2596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdd, 0x7a, 0xdb, 0xc6,
	0xd1, 0x96, 0x62, 0x59, 0x96, 0x60, 0xfd, 0x42, 0xb2, 0xbd, 0x92, 0x1d, 0x4a, 0x76, 0xfe, 0xf3,
	0x25, 0xd2, 0x17, 0x37, 0x69, 0xdd, 0xa6, 0x4d, 0x2b, 0x89, 0x62, 0x9c, 0x44, 0x72, 0x94, 0xa1,
	0xa5, 0xfc, 0x34, 0xad, 0xbb, 0x04, 0x96, 0x24, 0x42, 0x00, 0x8b, 0x62, 0x97, 0xaa, 0xa8, 0xa3,
	0x3e, 0x4f, 0x6f, 0xa0, 0x77, 0xd0, 0xdb, 0xc9, 0x61, 0x0e, 0x73, 0x94, 0xa7, 0x51, 0x6e, 0xa4,
	0xcf, 0x2c, 0x16, 0x20, 0x16, 0x04, 0x63, 0x52, 0xca, 0x99, 0x34, 0xef, 0x3b, 0xbb, 0xd8, 0xc1,
	0x60, 0xe7, 0x9d, 0xa1, 0xf5, 0x66, 0xcb, 0x93, 0xed, 0x6e, 0x63, 0xcb, 0xe1, 0xc1, 0xb6, 0x4f,
	0x9d, 0xce, 0xdb, 0x1e, 0xdf, 0x8e, 0x3a, 0xad, 0xed, 0xf3, 0xa6, 0xd8, 0x6e, 0xb1, 0x90, 0xc5,
	0x54, 0x32, 0x77, 0x2b, 0x8a, 0xb9, 0xe4, 0xf6, 0x7a, 0x9f, 0xbb, 0x85, 0xdc, 0x67, 0x1e, 0xdf,
	0x8a, 0x3a, 0xad, 0xad, 0xf3, 0xa6, 0x58, 0x7f, 0x3b, 0xb7, 0x4e, 0x8b, 0xb7, 0xf8, 0xb6, 0x72,
	0x69, 0x74, 0x9b, 0xea, 0x3f, 0xf5, 0x8f, 0xfa, 0x2b, 0x59, 0xea, 0xc1, 0x7f, 0xb6, 0xac, 0xa9,
	0x23, 0xce, 0x7d, 0x7b, 0xd3, 0x9a, 0x0a, 0x69, 0xc0, 0xc8, 0xe4, 0xe6, 0xe4, 0xeb, 0xb3, 0xbb,
	0x73, 0xdf, 0xfe, 0xb0, 0x31, 0x71, 0xf1, 0xc3, 0xc6, 0xd4, 0x13, 0x1a, 0x30, 0x50, 0x88, 0x7d,
	0xdf, 0x9a, 0x12, 0xde, 0x39, 0x23, 0x5c, 0x31, 0xe6, 0x35, 0xe3, 0x7a, 0xdd, 0x3b, 0x67, 0xcf,
	0x40, 0x41, 0xf6, 0x5b, 0xd6, 0x8c, 0x43, 0x23, 0xea, 0x78, 0xb2, 0x47, 0xae, 0x29, 0xda, 0x92,
	0xa6, 0xcd, 0xec, 0x69, 0x3b, 0x64, 0x0c, 0xfb, 0x0d, 0xeb, 0x06, 0xf5, 0x25, 0x70, 0x2e, 0xc9,
	0x94, 0x22, 0x2f, 0x6a, 0xf2, 0x8d, 0x9d, 0xc4, 0x0c, 0x29, 0x6e, 0xbf, 0x6a, 0x4d, 0xb7, 0x19,
	0xf5, 0x65, 0x9b, 0x5c, 0x57, 0xcc, 0x05, 0xcd, 0x9c, 0x7e, 0xac, 0xac, 0xa0, 0x51, 0x3c, 0x45,
	0xab, 0xeb, 0xb9, 0x64, 0xda, 0x3c, 0xc5, 0x87, 0x5d, 0xcf, 0x05, 0x85, 0xe0, 0xa6, 0xa7, 0x2c,
	0x16, 0x1e, 0x0f, 0xc9, 0x0d, 0x73, 0xd3, 0x93, 0xc4, 0x0c, 0x29, 0x8e, 0x9b, 0x36, 0x38, 0x97,
	0x35, 0x41, 0x66, 0xcc, 0x4d, 0x77, 0x95, 0x15, 0x34, 0x6a, 0x3f, 0xb4, 0x2c, 0x97, 0xf9, 0xac,
	0x45, 0x25, 0xae, 0x3a, 0xab, 0xb8, 0xb6, 0xe6, 0x5a, 0xd5, 0x0c, 0x81, 0x1c, 0xcb, 0x7e, 0xcf,
	0xba, 0x49, 0xbb, 0x92, 0x03, 0x8b, 0x7c, 0xea, 0x30, 0x62, 0x29, 0xa7, 0x15, 0xed, 0x74, 0x73,
	0xa7, 0x0f, 0x41, 0x9e, 0x67, 0x6f, 0x5b, 0xb3, 0x0e, 0x75, 0xda, 0xac, 0xe6, 0xf9, 0x8c, 0xdc,
	0x54, 0x4e, 0xcb, 0xda, 0x69, 0x76, 0x2f, 0x05, 0xa0, 0xcf, 0xc1, 0x37, 0xd2, 0xa4, 0x9e, 0x7f,
	0xc8, 0x5d, 0x46, 0xe6, 0xcc, 0x37, 0x52, 0xd3, 0x76, 0xc8, 0x18, 0xf6, 0xfb, 0xd6, 0xbc, 0xef,
	0x09, 0x59, 0x0f, 0x69, 0x24, 0xda, 0x5c, 0x0a, 0x32, 0xaf, 0x5c, 0x6e, 0x69, 0x97, 0xf9, 0x83,
	0x3c, 0x08, 0x26, 0x17, 0xc3, 0x80, 0x8f, 0xba, 0x7f, 0x16, 0xd1, 0xd0, 0x25, 0x0b, 0x66, 0x18,
	0x76, 0x32, 0x04, 0x72, 0xac, 0x24, 0x74, 0x6e, 0x37, 0xaa, 0x7a, 0x52, 0x72, 0xb2, 0x58, 0x0c,
	0x5d, 0x8a, 0x40, 0x8e, 0x95, 0xf9, 0x00, 0x46, 0x92, 0x2c, 0x95, 0xf8, 0x28, 0x04, 0x72, 0x2c,
	0xcc, 0x8b, 0x66, 0xcc, 0x18, 0x59, 0x36, 0xf3, 0xa2, 0x16, 0x33, 0x06, 0x0a, 0xc1, 0xc8, 0x52,
	0xdf, 0xe7, 0x0e, 0x7e, 0x66, 0xc4, 0x36, 0x23, 0xbb, 0x93, 0x02, 0xd0, 0xe7, 0x60, 0x64, 0x63,
	0x46, 0x5d, 0x1e, 0xfa, 0x3d, 0xb2, 0x62, 0x46, 0x16, 0xb4, 0x1d, 0x32, 0x06, 0xe6, 0x12, 0xad,
	0xb7, 0xbd, 0xa6, 0x24, 0xab, 0x66, 0x2e, 0xed, 0x28, 0x2b, 0x68, 0x14, 0xd3, 0xd3, 0xe1, 0x41,
	0xc0, 0x42, 0x49, 0x6e, 0x99, 0xe9, 0xb9, 0x97, 0x98, 0x21, 0xc5, 0x31, 0x0e, 0x4c, 0x45, 0x11,
	0xbf, 0x40, 0x72, 0xdb, 0x8c, 0xc3, 0x7e, 0x86, 0x40, 0x8e, 0x85, 0xcb, 0xe3, 0x69, 0xbd, 0xb0,
	0x45, 0xee, 0x98, 0xcb, 0xd7, 0x12, 0x33, 0xa4, 0x38, 0xe6, 0x42, 0x33, 0xa6, 0x2d, 0xdc, 0x2a,
	0x49, 0x6c, 0x62, 0xe6, 0x42, 0x2d, 0x0f, 0x82, 0xc9, 0xc5, 0xe3, 0xfa, 0x8c, 0x76, 0x98, 0x4b,
	0xd6, 0xcc, 0xe3, 0x1e, 0x28, 0x2b, 0x68, 0x14, 0xa3, 0x1e, 0x74, 0x7d, 0xe9, 0xb5, 0xb9, 0x90,
	0x64, 0xdd, 0x8c, 0xfa, 0x61, 0x0a, 0x40, 0x9f, 0x63, 0x1f, 0x5a, 0x2b, 0x4d, 0x46, 0x65, 0x37,
	0x66, 0x3b, 0xa2, 0x17, 0x3a, 0x55, 0x26, 0x64, 0xcc, 0x7b, 0xe4, 0xae, 0x72, 0xbd, 0xab, 0x5d,
	0x57, 0x6a, 0x83, 0x14, 0x28, 0xf3, 0xb3, 0x3f, 0xb4, 0x96, 0xb5, 0x79, 0x3f, 0x88, 0x64, 0x6f,
	0x37, 0xe2, 0x8d, 0x6f, 0xc8, 0x3d, 0xb5, 0xd8, 0x9a, 0x5e, 0x6c, 0xb9, 0x56, 0x24, 0xc0, 0xa0,
	0x8f, 0xfd, 0xb1, 0x65, 0x6b, 0xe3, 0xc1, 0xf9, 0xbb, 0x7b, 0x3c, 0x88, 0x62, 0x26, 0x04, 0x79,
	0x51, 0xad, 0xb4, 0xae, 0x57, 0xb2, 0x6b, 0x03, 0x0c, 0x28, 0xf1, 0xb2, 0x9f, 0x59, 0x6b, 0xda,
	0xaa, 0x42, 0x70, 0xe2, 0xb2, 0xd3, 0xbd, 0x98, 0x8a, 0x76, 0xb5, 0x1b, 0x44, 0xa4, 0xa2, 0x96,
	0xbc, 0xaf, 0x97, 0x5c, 0xab, 0x0d, 0x23, 0xc2, 0xf0, 0x35, 0xec, 0xaf, 0x2d, 0xa2, 0xc1, 0x7a,
	0x44, 0x1d, 0x76, 0x48, 0xa3, 0xc7, 0x9e, 0x90, 0xbc, 0x15, 0xd3, 0x80, 0x6c, 0xa8, 0xf5, 0x37,
	0xf5, 0xfa, 0xa4, 0x36, 0x84, 0x07, 0x43, 0x57, 0xc8, 0xc7, 0x34, 0xa4, 0x0d, 0x9f, 0xb9, 0x4f,
	0xcf, 0x5a, 0x64, 0xb3, 0x3c, 0xa6, 0x19, 0x01, 0x06, 0x7d, 0xec, 0xaa, 0xb5, 0xa4, 0x8d, 0x8f,
	0xb9, 0xcf, 0x76, 0xbd, 0x58, 0xb6, 0xc9, 0x7d, 0xb5, 0x0e, 0xd1, 0xeb, 0x2c, 0xd5, 0x0a, 0x38,
	0x0c, 0x78, 0xe4, 0x0e, 0xbb, 0x7f, 0x26, 0x59, 0x28, 0xbc, 0x86, 0xcf, 0xaa, 0x54, 0x52, 0xc1,
	0x24, 0x79, 0x50, 0x7a, 0xd8, 0x01, 0x1e, 0x0c, 0x5d, 0x21, 0x97, 0x8f, 0xfb, 0x41, 0x83, 0xb9,
	0x2e, 0x73, 0x11, 0x21, 0x2f, 0x95, 0xe6, 0x63, 0x9e, 0x02, 0x65, 0x7e, 0xb9, 0x23, 0xef, 0x72,
	0xde, 0x09, 0x68, 0xdc, 0x11, 0xe4, 0xe5, 0xd2, 0x23, 0x67, 0x38, 0x0c, 0x78, 0xd8, 0x5f, 0x5a,
	0x77, 0xb4, 0x0d, 0x6b, 0x80, 0xe8, 0x09, 0xc9, 0x82, 0x03, 0x2f, 0xf0, 0xa4, 0x20, 0xaf, 0xa8,
	0xc5, 0x36, 0xf4, 0x62, 0x77, 0x6a, 0xe5, 0x34, 0x18, 0xe6, 0x9f, 0xcf, 0x73, 0x1a, 0xb7, 0xd8,
	0xae, 0xcf, 0x9d, 0x8e, 0x20, 0xaf, 0x96, 0xe7, 0x79, 0x9f, 0x01, 0x25, 0x5e, 0xb9, 0x44, 0x51,
	0xd6, 0x6a, 0x88, 0x45, 0xea, 0xb5, 0xd2, 0x44, 0xe9, 0x13, 0x60, 0xd0, 0x47, 0x5d, 0x55, 0x3a,
	0x1b, 0xdb, 0xf4, 0xbd, 0x77, 0x1e, 0x92, 0xd7, 0x0b, 0x57, 0x55, 0x1e, 0x04, 0x93, 0x6b, 0x3f,
	0xb2, 0xe6, 0x52, 0x43, 0x87, 0x79, 0x21, 0x79, 0x43, 0xf9, 0xae, 0x6a, 0xdf, 0xb9, 0x5a, 0x0e,
	0x03, 0x83, 0x99, 0xf3, 0xdc, 0x77, 0x79, 0x18, 0x93, 0x37, 0x4b, 0x3d, 0x15, 0x06, 0x06, 0x33,
	0x97, 0x93, 0xc7, 0x82, 0xc5, 0xbc, 0xf1, 0xcd, 0x8e, 0xe3, 0xf0, 0x6e, 0x28, 0xf1, 0x5e, 0xfe,
	0xbf, 0xd2, 0x9c, 0x1c, 0xe0, 0xc1, 0xd0, 0x15, 0xb0, 0xd8, 0xc9, 0x5e, 0xc4, 0xc8, 0x5b, 0x66,
	0xb1, 0x7b, 0xda, 0x8b, 0x18, 0x28, 0x44, 0xe9, 0xb4, 0x98, 0x25, 0xd7, 0xfa, 0xdb, 0x05, 0x9d,
	0xa6, 0xed, 0x90, 0x31, 0x70, 0xbd, 0xae, 0x60, 0x2e, 0xd9, 0x32, 0xd7, 0x3b, 0x16, 0xcc, 0x05,
	0x85, 0xa8, 0xe2, 0x79, 0x4a, 0x3d, 0x1f, 0x3f, 0x5d, 0xb2, 0x5d, 0x28, 0x9e, 0x29, 0x00, 0x7d,
	0x0e, 0xd6, 0xae, 0x98, 0x35, 0x59, 0xcc, 0x42, 0x87, 0xb9, 0xe4, 0xff, 0xcd, 0xda, 0x05, 0x19,
	0x02, 0x39, 0x16, 0xbe, 0x65, 0x27, 0xbd, 0x36, 0x55, 0xe9, 0x7f, 0xc7, 0x7c, 0xcb, 0x7b, 0x79,
	0x10, 0x4c, 0x2e, 0x16, 0xbe, 0x00, 0xe3, 0xc3, 0x5c, 0xf2, 0xd0, 0x2c, 0x7c, 0x87, 0x89, 0x19,
	0x52, 0xdc, 0x7e, 0xc9, 0xba, 0xfe, 0xf7, 0x2e, 0x97, 0x94, 0xfc, 0xca, 0x14, 0xba, 0x9f, 0xa1,
	0x11, 0x12, 0x0c, 0xf5, 0x5b, 0xcc, 0x04, 0x8b, 0x4f, 0x93, 0x20, 0xbe, 0x6b, 0xea, 0x37, 0xe8,
	0x43, 0x90, 0xe7, 0x25, 0xe7, 0x76, 0x78, 0x9c, 0xd4, 0xec, 0xf7, 0x8a, 0xe7, 0x4e, 0x11, 0xc8,
	0xb1, 0xd0, 0x47, 0x3d, 0xda, 0x11, 0xf7, 0x42, 0x49, 0x7e, 0x6d, 0xfa, 0x1c, 0x66, 0x08, 0xe4,
	0x58, 0xf8, 0x82, 0x45, 0x9b, 0xc6, 0x2c, 0xac, 0x09, 0xf2, 0x1b, 0xf3, 0x05, 0xd7, 0xb5, 0x1d,
	0x32, 0x86, 0x4a, 0x87, 0x36, 0x73, 0x3a, 0xa2, 0x1b, 0x90, 0x47, 0x85, 0x74, 0xd0, 0x76, 0xc8,
	0x18, 0x78, 0xf4, 0x34, 0xb6, 0x78, 0xf4, 0xdf, 0x9a, 0x47, 0xdf, 0xeb, 0x43, 0x90, 0xe7, 0x61,
	0x58, 0xe9, 0x53, 0x2f, 0x60, 0xe4, 0x77, 0x66, 0x58, 0x77, 0xd0, 0x08, 0x09, 0x86, 0xaf, 0xc9,
	0x65, 0xa7, 0x9e, 0xc3, 0x04, 0x79, 0xdf, 0x7c, 0x4d, 0xd5, 0xc4, 0x0c, 0x29, 0x8e, 0x59, 0xc9,
	0xce, 0x98, 0x43, 0x7e, 0x6f, 0x66, 0xe5, 0xfe, 0x19, 0x73, 0x40, 0x21, 0x28, 0x42, 0x04, 0x93,
	0xc7, 0x9e, 0x4b, 0xfe, 0x60, 0x8a, 0x90, 0xba, 0xb2, 0x82, 0x46, 0xf1, 0xc9, 0xce, 0x79, 0xc8,
	0x5c, 0xf2, 0x81, 0xf9, 0x64, 0x5f, 0xa1, 0x11, 0x12, 0x0c, 0x9f, 0x4c, 0x84, 0x34, 0xaa, 0x7a,
	0x31, 0xf9, 0xa3, 0xf9, 0x64, 0xf5, 0xc4, 0x0c, 0x29, 0xae, 0x84, 0xb0, 0xe3, 0x7b, 0xe1, 0x63,
	0x16, 0x7b, 0x92, 0xfc, 0xa9, 0x20, 0x84, 0x33, 0x04, 0x72, 0x2c, 0x25, 0xec, 0xf1, 0x7b, 0x63,
	0xf2, 0xac, 0x45, 0x76, 0x0a, 0xc2, 0x3e, 0x05, 0xa0, 0xcf, 0x49, 0x5a, 0xad, 0x50, 0xbd, 0x7e,
	0xb2, 0x5b, 0x6c, 0xb5, 0x12, 0x3b, 0x64, 0x0c, 0x3c, 0xe2, 0x19, 0x95, 0x32, 0x26, 0x7b, 0xe6,
	0x11, 0xbf, 0x40, 0x23, 0x24, 0x18, 0xc6, 0xcb, 0xe1, 0x91, 0xc7, 0x04, 0xa9, 0x9a, 0xf1, 0xda,
	0x53, 0x56, 0xd0, 0x28, 0x6e, 0xdd, 0x95, 0xcd, 0x47, 0x9f, 0xa2, 0xf2, 0xdd, 0x37, 0xb7, 0x3e,
	0x96, 0xcd, 0x47, 0x89, 0xf2, 0x4d, 0x19, 0xf8, 0xd9, 0x86, 0x3c, 0x0e, 0xa8, 0xef, 0x9d, 0x27,
	0xdf, 0x4a, 0xcd, 0xfc, 0x6c, 0x9f, 0xe4, 0x41, 0x30, 0xb9, 0xf6, 0x8e, 0xb5, 0xe8, 0x50, 0xc1,
	0x04, 0x56, 0x5d, 0xe9, 0x9d, 0x62, 0x5f, 0xf9, 0xa1, 0x72, 0xbf, 0xa3, 0xdd, 0x17, 0xf7, 0x4c,
	0x18, 0x8a, 0x7c, 0x3c, 0xfa, 0xa9, 0x70, 0x68, 0x48, 0x1e, 0x9b, 0x47, 0x3f, 0x41, 0x23, 0x24,
	0x18, 0x1e, 0x3d, 0x6c, 0x04, 0xd8, 0xb7, 0x7c, 0x64, 0x1e, 0xfd, 0x89, 0xb2, 0x82, 0x46, 0xb3,
	0xef, 0x4a, 0x04, 0x0d, 0xf2, 0x71, 0xc9, 0x77, 0x25, 0x82, 0x06, 0x64, 0x8c, 0xa4, 0x45, 0x68,
	0x26, 0x97, 0xc9, 0x27, 0xc5, 0x16, 0x21, 0xb1, 0x43, 0xc6, 0xb0, 0x3f, 0xb0, 0x16, 0x62, 0xd6,
	0xcc, 0xdf, 0x2a, 0x07, 0xca, 0xe7, 0xb6, 0xf6, 0x59, 0x00, 0x03, 0x85, 0x02, 0x1b, 0xcb, 0x51,
	0x14, 0x7b, 0x01, 0x8d, 0x7b, 0xaa, 0xfd, 0x23, 0x87, 0x66, 0x39, 0x3a, 0xca, 0x61, 0x60, 0x30,
	0x71, 0x67, 0xc1, 0x1c, 0x1e, 0xba, 0x99, 0xef, 0x13, 0x73, 0xe7, 0xba, 0x81, 0x42, 0x81, 0x8d,
	0x6f, 0x09, 0xcb, 0x40, 0xa3, 0x27, 0xb2, 0xc6, 0xf1, 0x53, 0xf3, 0x2d, 0x1d, 0x9b, 0x30, 0x14,
	0xf9, 0x98, 0x25, 0x89, 0xc9, 0xd5, 0xd2, 0xec, 0xc8, 0xcc, 0x92, 0xe3, 0x3c, 0x08, 0x26, 0x17,
	0x9f, 0x3f, 0x31, 0x38, 0x6d, 0xcf, 0x77, 0x63, 0x16, 0x92, 0xcf, 0xcc, 0xe7, 0x3f, 0x36, 0x50,
	0x28, 0xb0, 0xed, 0x23, 0x6b, 0x35, 0xb1, 0x14, 0xe2, 0x0f, 0x6a, 0x95, 0x7b, 0x7a, 0x95, 0xd5,
	0xe3, 0x12, 0x0e, 0x94, 0x7a, 0xe2, 0x6d, 0xe1, 0xf3, 0x56, 0xc3, 0xa3, 0x82, 0xd4, 0xcd, 0xdb,
	0xe2, 0x20, 0x31, 0x43, 0x8a, 0x63, 0x7e, 0xaa, 0x46, 0x95, 0x3c, 0x35, 0xf3, 0x33, 0xe9, 0x64,
	0x13, 0x0c, 0x33, 0x29, 0xf0, 0x85, 0x4f, 0x1b, 0xcc, 0x27, 0xc7, 0x66, 0x26, 0x1d, 0x6a, 0x3b,
	0x64, 0x0c, 0xbc, 0x1a, 0xb1, 0xc9, 0x21, 0x27, 0xe6, 0xd5, 0x58, 0xef, 0x85, 0x0e, 0x28, 0x04,
	0xaf, 0x1b, 0x17, 0xa5, 0x93, 0x1a, 0xe8, 0x7c, 0x6e, 0x5e, 0x37, 0xd5, 0x14, 0x80, 0x3e, 0x07,
	0x85, 0x69, 0xcc, 0x9a, 0xe9, 0x7d, 0x1e, 0xab, 0xfa, 0xfb, 0x85, 0x29, 0x4c, 0xa1, 0x80, 0xc3,
	0x80, 0x07, 0x86, 0xe5, 0x1f, 0xb1, 0x27, 0x25, 0x0b, 0xc9, 0x97, 0x66, 0x58, 0x3e, 0x4f, 0xcc,
	0x90, 0xe2, 0x58, 0x65, 0x7c, 0xde, 0xf2, 0x1c, 0xea, 0x2b, 0xed, 0xf1, 0x95, 0x59, 0x65, 0x0e,
	0xfa, 0x10, 0xe4, 0x79, 0xa8, 0x29, 0xf5, 0xbf, 0x39, 0x7d, 0xf1, 0x67, 0x53, 0x53, 0x1e, 0x14,
	0x09, 0x30, 0xe8, 0xa3, 0xe6, 0x44, 0xdc, 0x0f, 0x50, 0x92, 0x7e, 0x5d, 0x98, 0x13, 0x25, 0x66,
	0x48, 0x71, 0x4c, 0xff, 0xa6, 0xa9, 0x93, 0xc9, 0x5f, 0xcc, 0xf4, 0x2f, 0xc8, 0x68, 0x28, 0xf2,
	0x31, 0xfd, 0xd3, 0x6f, 0x21, 0x59, 0xe0, 0xaf, 0x66, 0xfa, 0xd7, 0xf3, 0x20, 0x98, 0x5c, 0x73,
	0xff, 0x3d, 0x55, 0x11, 0x9e, 0x0d, 0xdb, 0x5f, 0xc1, 0x50, 0xe4, 0xe7, 0xf7, 0x4f, 0x16, 0xf8,
	0x5b, 0xf9, 0xfe, 0x89, 0xbb, 0xc9, 0x4d, 0x4b, 0xa3, 0xcb, 0x4e, 0x09, 0x1d, 0x2c, 0x8d, 0x2e,
	0x3b, 0x85, 0x14, 0x57, 0x23, 0x3f, 0xc7, 0x57, 0xea, 0xb4, 0x51, 0x18, 0xf9, 0x25, 0x66, 0x48,
	0xf1, 0x64, 0x12, 0x12, 0x4a, 0x76, 0x26, 0x89, 0x53, 0x9c, 0x84, 0x28, 0x33, 0xa4, 0x38, 0x66,
	0x73, 0x53, 0xa4, 0x64, 0xd7, 0xcc, 0xe6, 0x5a, 0x0a, 0x40, 0x9f, 0x93, 0x8c, 0x90, 0x9a, 0xa9,
	0x07, 0x2b, 0x8e, 0x90, 0x52, 0x04, 0x72, 0x2c, 0xa5, 0xf8, 0x38, 0x97, 0xa9, 0x53, 0xb3, 0xa0,
	0xf8, 0xfa, 0x10, 0xe4, 0x79, 0x49, 0x0d, 0xf0, 0xa9, 0x44, 0xe5, 0xd3, 0x2a, 0xd6, 0x80, 0xc4,
	0x0e, 0x19, 0x03, 0xd3, 0x37, 0x66, 0x6e, 0x37, 0x74, 0x69, 0x28, 0x0f, 0x99, 0xa4, 0x78, 0xc3,
	0x91, 0xb6, 0x99, 0xbe, 0x50, 0x24, 0xc0, 0xa0, 0x0f, 0x46, 0x8f, 0x9f, 0xb2, 0xd8, 0xa7, 0x3d,
	0xe2, 0x99, 0xd1, 0xfb, 0x34, 0x31, 0x43, 0x8a, 0xab, 0x39, 0x52, 0xe8, 0xc4, 0xbd, 0x48, 0xdd,
	0x79, 0xdf, 0x14, 0xe6, 0x48, 0x19, 0x02, 0x39, 0x16, 0x06, 0xa3, 0xc3, 0x7a, 0x6a, 0x14, 0x86,
	0x4e, 0x1d, 0x33, 0x18, 0x9f, 0xf4, 0x21, 0xc8, 0xf3, 0xf0, 0x45, 0x75, 0x58, 0xaf, 0x89, 0x25,
	0x5e, 0x12, 0xdf, 0x7c, 0x51, 0x9f, 0xa4, 0x00, 0xf4, 0x39, 0xb8, 0x4f, 0xd4, 0xe8, 0xb8, 0xcd,
	0x87, 0x1f, 0x49, 0x16, 0x0b, 0x12, 0x98, 0xfb, 0x1c, 0x29, 0xc8, 0x43, 0x08, 0xf2, 0x3c, 0xec,
	0x52, 0x45, 0xc4, 0x1c, 0x8f, 0xfa, 0xf5, 0x80, 0xfa, 0xbe, 0xee, 0x52, 0x43, 0xb3, 0x4b, 0xad,
	0x0f, 0x30, 0xa0, 0xc4, 0xeb, 0xc1, 0xbf, 0xe6, 0xac, 0x99, 0x34, 0xfd, 0xf1, 0x66, 0x8d, 0x38,
	0xf7, 0x8b, 0x53, 0xf2, 0x23, 0xce, 0x7d, 0x50, 0x08, 0x2a, 0x89, 0x08, 0x65, 0xb5, 0x24, 0x2f,
	0x98, 0x4a, 0xe2, 0x48, 0x59, 0x41, 0xa3, 0xd9, 0xbc, 0xfd, 0xda, 0xd0, 0x79, 0x7b, 0xda, 0xc6,
	0x4d, 0x8d, 0xd4, 0xc6, 0x5d, 0x1f, 0xb9, 0x8d, 0x9b, 0x1e, 0xda, 0xc6, 0x99, 0x5d, 0xd9, 0x8d,
	0x71, 0xbb, 0xb2, 0xa4, 0x2a, 0xcc, 0x94, 0x77, 0x65, 0xb1, 0xd9, 0x95, 0x65, 0xf5, 0x20, 0x95,
	0xfb, 0xb3, 0x23, 0xca, 0x7d, 0xeb, 0x39, 0x72, 0xbf, 0xeb, 0xb9, 0x7a, 0x30, 0x9e, 0x97, 0xfb,
	0x5d, 0x2d, 0xf7, 0xbb, 0x9e, 0x6b, 0x4a, 0xed, 0xb9, 0x11, 0xa4, 0x76, 0xee, 0x27, 0x83, 0xf9,
	0xe7, 0xfc, 0x64, 0x90, 0x97, 0xc6, 0x0b, 0xe3, 0x4b, 0xe3, 0xc5, 0xab, 0x49, 0xe3, 0xa5, 0xcb,
	0x4a, 0xe3, 0xe5, 0x91, 0xa4, 0xb1, 0xfd, 0xb3, 0xd2, 0x38, 0xfd, 0xe9, 0x65, 0x65, 0xe8, 0x4f,
	0x2f, 0x45, 0x81, 0xba, 0x7a, 0x05, 0x81, 0x7a, 0x6b, 0x2c, 0x81, 0xfa, 0xc8, 0x9a, 0x73, 0x31,
	0x65, 0xd3, 0x71, 0xf1, 0x6d, 0x73, 0xe7, 0x6a, 0x0e, 0x03, 0x83, 0xa9, 0x5e, 0xa8, 0x60, 0x71,
	0xcc, 0x9a, 0x42, 0x4f, 0xcc, 0xfb, 0x2f, 0x54, 0xdb, 0x21, 0x63, 0x18, 0x32, 0x8d, 0x3c, 0x57,
	0xa6, 0x95, 0x69, 0xaa, 0xb5, 0xab, 0x68, 0xaa, 0xf5, 0xe7, 0x68, 0xaa, 0x52, 0x71, 0x74, 0xf7,
	0x72, 0xe2, 0x28, 0x2d, 0xe3, 0xf7, 0x46, 0x2f, 0xe3, 0x2f, 0x8e, 0x53, 0xc6, 0x2b, 0x63, 0x97,
	0xf1, 0x8d, 0xcb, 0x94, 0xf1, 0xcd, 0xd1, 0xca, 0xf8, 0x83, 0x8b, 0x25, 0x6b, 0xfa, 0x84, 0xfb,
	0xdd, 0xe4, 0x5e, 0x7e, 0xce, 0x2f, 0xa5, 0xe9, 0xcd, 0xfd, 0xc2, 0x48, 0x37, 0xf7, 0xb5, 0x91,
	0x6f, 0xee, 0xa9, 0xd1, 0x06, 0x70, 0xd7, 0xc7, 0x1e, 0xc0, 0x4d, 0x5f, 0xee, 0xaa, 0xbf, 0x31,
	0xc6, 0x55, 0x5f, 0x18, 0x98, 0xcd, 0x8c, 0x38, 0x30, 0x4b, 0x64, 0xb8, 0x6a, 0x53, 0x66, 0x07,
	0x64, 0xb8, 0x6a, 0x52, 0x52, 0x1c, 0x3f, 0xf2, 0x53, 0xee, 0x37, 0x54, 0xd5, 0x46, 0xbe, 0x65,
	0x7e, 0xe4, 0x27, 0x39, 0x0c, 0x0c, 0xa6, 0x31, 0xff, 0xba, 0x39, 0xee, 0xfc, 0x6b, 0x6e, 0xc4,
	0xf9, 0x57, 0xfe, 0xf7, 0xc2, 0xf9, 0x51, 0x7e, 0x2f, 0xd4, 0xb3, 0x98, 0x85, 0x9f, 0x9d, 0xc5,
	0x0c, 0x0e, 0x0d, 0x16, 0xc7, 0x1a, 0x1a, 0xa4, 0xb7, 0xf6, 0xd2, 0xc8, 0xb7, 0xf6, 0xf2, 0x15,
	0x6e, 0x6d, 0xfb, 0xaa, 0x63, 0x85, 0x95, 0xab, 0x8e, 0x15, 0x56, 0xaf, 0x34, 0x56, 0xb8, 0xf5,
	0x8b, 0x8c, 0x15, 0x6e, 0xff, 0x12, 0x63, 0x85, 0x3b, 0xa3, 0x8e, 0x15, 0xc8, 0x88, 0x63, 0x85,
	0xb5, 0x91, 0xc7, 0x0a, 0xeb, 0x43, 0xc7, 0x0a, 0x65, 0x15, 0xed, 0xee, 0x55, 0x2a, 0xda, 0xbd,
	0xf1, 0xa6, 0x04, 0x2f, 0x5e, 0x65, 0x4a, 0x50, 0xb9, 0xda, 0x94, 0x60, 0x63, 0xfc, 0x29, 0xc1,
	0xe6, 0x55, 0xa7, 0x04, 0xf7, 0xc7, 0x98, 0x12, 0x0c, 0xb4, 0xf8, 0x0f, 0x2e, 0xd7, 0xe2, 0xbf,
	0x34, 0x7a, 0x8b, 0xff, 0xf2, 0xe8, 0xda, 0xe0, 0x95, 0x71, 0xb4, 0xc1, 0xab, 0x63, 0x6b, 0x83,
	0xd7, 0x2e, 0xa3, 0x0d, 0x5e, 0x1f, 0xb1, 0xc5, 0x2f, 0x6d, 0xda, 0xdf, 0x18, 0xbf, 0x69, 0xdf,
	0x7d, 0xe7, 0xdb, 0x1f, 0x2b, 0x13, 0xdf, 0xfd, 0x58, 0x99, 0xf8, 0xfe, 0xc7, 0xca, 0xc4, 0x3f,
	0x2f, 0x2a, 0x93, 0xdf, 0x5e, 0x54, 0x26, 0xbf, 0xbb, 0xa8, 0x4c, 0x7e, 0x7f, 0x51, 0x99, 0xfc,
	0xef, 0x45, 0x65, 0xf2, 0xdf, 0x3f, 0x55, 0x26, 0xbe, 0xfb, 0xa9, 0x32, 0xf1, 0xfd, 0x4f, 0x95,
	0x89, 0xaf, 0xae, 0x9d, 0x37, 0xc5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xc0, 0x1d, 0x84,
	0x37, 0x26, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Size_)
	copy(dAtA[i:], m.Size_)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Size_)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xfa
	i -= len(m.SpecialSmallBlocks)
	copy(dAtA[i:], m.SpecialSmallBlocks)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SpecialSmallBlocks)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xf2
	i -= len(m.Pbkdf2iters)
	copy(dAtA[i:], m.Pbkdf2iters)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Pbkdf2iters)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xea
	i -= len(m.Keyformat)
	copy(dAtA[i:], m.Keyformat)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Keyformat)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xe2
	i -= len(m.Keylocation)
	copy(dAtA[i:], m.Keylocation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Keylocation)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xda
	i -= len(m.Encryption)
	copy(dAtA[i:], m.Encryption)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Encryption)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xd2
	i -= len(m.Overlay)
	copy(dAtA[i:], m.Overlay)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Overlay)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xca
	i -= len(m.RedundantMetadata)
	copy(dAtA[i:], m.RedundantMetadata)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RedundantMetadata)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xc2
	i -= len(m.Relatime)
	copy(dAtA[i:], m.Relatime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Relatime)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xba
	i -= len(m.Rootcontext)
	copy(dAtA[i:], m.Rootcontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Rootcontext)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb2
	i -= len(m.Defcontext)
	copy(dAtA[i:], m.Defcontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Defcontext)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xaa
	i -= len(m.Fscontext)
	copy(dAtA[i:], m.Fscontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Fscontext)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa2
	i -= len(m.Context)
	copy(dAtA[i:], m.Context)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Context)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0x9a
	i -= len(m.Acltype)
	copy(dAtA[i:], m.Acltype)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Acltype)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0x92
	i -= len(m.Snapdev)
	copy(dAtA[i:], m.Snapdev)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Snapdev)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0x8a
	i -= len(m.SnapshotCount)
	copy(dAtA[i:], m.SnapshotCount)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SnapshotCount)))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0x82
	i -= len(m.FilesystemCount)
	copy(dAtA[i:], m.FilesystemCount)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FilesystemCount)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xfa
	i -= len(m.SnapshotLimit)
	copy(dAtA[i:], m.SnapshotLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SnapshotLimit)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xf2
	i -= len(m.FilesystemLimit)
	copy(dAtA[i:], m.FilesystemLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FilesystemLimit)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xea
	i -= len(m.Volmode)
	copy(dAtA[i:], m.Volmode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Volmode)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xe2
	i -= len(m.Logicalreferenced)
	copy(dAtA[i:], m.Logicalreferenced)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Logicalreferenced)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xda
	i -= len(m.Logicalused)
	copy(dAtA[i:], m.Logicalused)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Logicalused)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xd2
	i -= len(m.Written)
	copy(dAtA[i:], m.Written)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Written)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xca
	i -= len(m.Refcompressratio)
	copy(dAtA[i:], m.Refcompressratio)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Refcompressratio)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xc2
	i -= len(m.Dnodesize)
	copy(dAtA[i:], m.Dnodesize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Dnodesize)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xba
	i -= len(m.Sync)
	copy(dAtA[i:], m.Sync)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Sync)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xb2
	i -= len(m.Mlslabel)
	copy(dAtA[i:], m.Mlslabel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mlslabel)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xaa
	i -= len(m.Dedup)
	copy(dAtA[i:], m.Dedup)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Dedup)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xa2
	i -= len(m.Logbias)
	copy(dAtA[i:], m.Logbias)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Logbias)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x9a
	i -= len(m.Usedbyrefreservation)
	copy(dAtA[i:], m.Usedbyrefreservation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Usedbyrefreservation)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x92
	i -= len(m.Usedbychildren)
	copy(dAtA[i:], m.Usedbychildren)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Usedbychildren)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x8a
	i -= len(m.Usedbydataset)
	copy(dAtA[i:], m.Usedbydataset)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Usedbydataset)))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x82
	i -= len(m.Usedbysnapshots)
	copy(dAtA[i:], m.Usedbysnapshots)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Usedbysnapshots)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xfa
	i -= len(m.Secondarycache)
	copy(dAtA[i:], m.Secondarycache)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Secondarycache)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xf2
	i -= len(m.Primarycache)
	copy(dAtA[i:], m.Primarycache)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Primarycache)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xea
	i -= len(m.Refreservation)
	copy(dAtA[i:], m.Refreservation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Refreservation)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xe2
	i -= len(m.Refquota)
	copy(dAtA[i:], m.Refquota)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Refquota)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xda
	i -= len(m.Sharesmb)
	copy(dAtA[i:], m.Sharesmb)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Sharesmb)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xd2
	i -= len(m.Nbmand)
	copy(dAtA[i:], m.Nbmand)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Nbmand)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xca
	i -= len(m.Vscan)
	copy(dAtA[i:], m.Vscan)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Vscan)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xc2
	i -= len(m.Casesensitivity)
	copy(dAtA[i:], m.Casesensitivity)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Casesensitivity)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xba
	i -= len(m.Normalization)
	copy(dAtA[i:], m.Normalization)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Normalization)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xb2
	i -= len(m.Utf8only)
	copy(dAtA[i:], m.Utf8only)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Utf8only)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xaa
	i -= len(m.Copies)
	copy(dAtA[i:], m.Copies)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Copies)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xa2
	i -= len(m.Xattr)
	copy(dAtA[i:], m.Xattr)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Xattr)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x9a
	i -= len(m.CanMount)
	copy(dAtA[i:], m.CanMount)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CanMount)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x92
	i -= len(m.Createtxg)
	copy(dAtA[i:], m.Createtxg)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Createtxg)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x8a
	i -= len(m.AclinHerit)
	copy(dAtA[i:], m.AclinHerit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AclinHerit)))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x82
	i -= len(m.SnapDir)
	copy(dAtA[i:], m.SnapDir)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SnapDir)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xfa
	i -= len(m.Zoned)
	copy(dAtA[i:], m.Zoned)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Zoned)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xf2
	i -= len(m.SetUid)
	copy(dAtA[i:], m.SetUid)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SetUid)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xea
	i -= len(m.Exec)
	copy(dAtA[i:], m.Exec)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Exec)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xe2
	i -= len(m.Devices)
	copy(dAtA[i:], m.Devices)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Devices)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xda
	i -= len(m.ATime)
	copy(dAtA[i:], m.ATime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ATime)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xd2
	i -= len(m.Compression)
	copy(dAtA[i:], m.Compression)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Compression)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xca
	i -= len(m.Checksum)
	copy(dAtA[i:], m.Checksum)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Checksum)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xc2
	i -= len(m.SharenFs)
	copy(dAtA[i:], m.SharenFs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SharenFs)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xba
	i -= len(m.MountPoint)
	copy(dAtA[i:], m.MountPoint)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MountPoint)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xb2
	i -= len(m.RecordSize)
	copy(dAtA[i:], m.RecordSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RecordSize)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xaa
	i -= len(m.Reservation)
	copy(dAtA[i:], m.Reservation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reservation)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xa2
	i -= len(m.Quota)
	copy(dAtA[i:], m.Quota)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Quota)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x9a
	i -= len(m.Mounted)
	copy(dAtA[i:], m.Mounted)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mounted)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x92
	i -= len(m.CompressRatio)
	copy(dAtA[i:], m.CompressRatio)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CompressRatio)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x8a
	i -= len(m.Referenced)
	copy(dAtA[i:], m.Referenced)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Referenced)))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x82
	i -= len(m.Available)
	copy(dAtA[i:], m.Available)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Available)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xfa
	i -= len(m.Used)
	copy(dAtA[i:], m.Used)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Used)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf2
	i -= len(m.Creation)
	copy(dAtA[i:], m.Creation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Creation)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xea
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe2
	i -= len(m.FeatureUserobjAccounting)
	copy(dAtA[i:], m.FeatureUserobjAccounting)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureUserobjAccounting)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xda
	i -= len(m.FeatureEdonr)
	copy(dAtA[i:], m.FeatureEdonr)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureEdonr)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd2
	i -= len(m.FeatureSkein)
	copy(dAtA[i:], m.FeatureSkein)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureSkein)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xca
	i -= len(m.FeatureSha512)
	copy(dAtA[i:], m.FeatureSha512)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureSha512)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc2
	i -= len(m.FeatureLargeDnode)
	copy(dAtA[i:], m.FeatureLargeDnode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureLargeDnode)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xba
	i -= len(m.FeatureLargeBlocks)
	copy(dAtA[i:], m.FeatureLargeBlocks)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureLargeBlocks)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb2
	i -= len(m.FeatureFilesystemLimits)
	copy(dAtA[i:], m.FeatureFilesystemLimits)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureFilesystemLimits)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xaa
	i -= len(m.FeatureBookmarks)
	copy(dAtA[i:], m.FeatureBookmarks)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureBookmarks)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa2
	i -= len(m.FeatureEmbeddedData)
	copy(dAtA[i:], m.FeatureEmbeddedData)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureEmbeddedData)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	i -= len(m.FeatureExtensibleDataset)
	copy(dAtA[i:], m.FeatureExtensibleDataset)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureExtensibleDataset)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	i -= len(m.FeatureHoleBirth)
	copy(dAtA[i:], m.FeatureHoleBirth)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureHoleBirth)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x8a
	i -= len(m.FeatureEnabledTxg)
	copy(dAtA[i:], m.FeatureEnabledTxg)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureEnabledTxg)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x82
	i -= len(m.FeatureSpaceMapHistogram)
	copy(dAtA[i:], m.FeatureSpaceMapHistogram)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureSpaceMapHistogram)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	i -= len(m.FeatureMultiVdevCrashDump)
	copy(dAtA[i:], m.FeatureMultiVdevCrashDump)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureMultiVdevCrashDump)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	i -= len(m.FeatureLz4Compress)
	copy(dAtA[i:], m.FeatureLz4Compress)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureLz4Compress)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	i -= len(m.FeatureEmptyBpobj)
	copy(dAtA[i:], m.FeatureEmptyBpobj)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureEmptyBpobj)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	i -= len(m.FeatureAsyncDestroy)
	copy(dAtA[i:], m.FeatureAsyncDestroy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FeatureAsyncDestroy)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	i -= len(m.Multihost)
	copy(dAtA[i:], m.Multihost)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Multihost)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	i -= len(m.Leaked)
	copy(dAtA[i:], m.Leaked)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Leaked)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	i -= len(m.Fragmentation)
	copy(dAtA[i:], m.Fragmentation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Fragmentation)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	i -= len(m.Freeing)
	copy(dAtA[i:], m.Freeing)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Freeing)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	i -= len(m.ExpandSize)
	copy(dAtA[i:], m.ExpandSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExpandSize)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	i -= len(m.Comment)
	copy(dAtA[i:], m.Comment)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Comment)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	i -= len(m.AShift)
	copy(dAtA[i:], m.AShift)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AShift)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	i -= len(m.Readonly)
	copy(dAtA[i:], m.Readonly)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Readonly)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	i -= len(m.Allocated)
	copy(dAtA[i:], m.Allocated)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Allocated)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	i -= len(m.Free)
	copy(dAtA[i:], m.Free)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Free)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	i -= len(m.DedupRatio)
	copy(dAtA[i:], m.DedupRatio)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DedupRatio)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i -= len(m.DedupDitto)
	copy(dAtA[i:], m.DedupDitto)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DedupDitto)))
	i--
	dAtA[i] = 0x7a
	i -= len(m.AutoExpand)
	copy(dAtA[i:], m.AutoExpand)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AutoExpand)))
	i--
	dAtA[i] = 0x72
	i -= len(m.ListSnapshots)
	copy(dAtA[i:], m.ListSnapshots)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ListSnapshots)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.FailMode)
	copy(dAtA[i:], m.FailMode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FailMode)))
	i--
	dAtA[i] = 0x62
	i -= len(m.CacheFile)
	copy(dAtA[i:], m.CacheFile)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CacheFile)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.AutoReplace)
	copy(dAtA[i:], m.AutoReplace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AutoReplace)))
	i--
	dAtA[i] = 0x52
	i -= len(m.Delegation)
	copy(dAtA[i:], m.Delegation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Delegation)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.BootFs)
	copy(dAtA[i:], m.BootFs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BootFs)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Guid)
	copy(dAtA[i:], m.Guid)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Guid)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Health)
	copy(dAtA[i:], m.Health)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Health)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.AltRoot)
	copy(dAtA[i:], m.AltRoot)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AltRoot)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Capacity)
	copy(dAtA[i:], m.Capacity)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Capacity)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Rootcontext)
	copy(dAtA[i:], m.Rootcontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Rootcontext)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x82
	i -= len(m.Defcontext)
	copy(dAtA[i:], m.Defcontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Defcontext)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	i -= len(m.Fscontext)
	copy(dAtA[i:], m.Fscontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Fscontext)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	i -= len(m.Context)
	copy(dAtA[i:], m.Context)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Context)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	i -= len(m.Acltype)
	copy(dAtA[i:], m.Acltype)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Acltype)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	i -= len(m.Logicalreferenced)
	copy(dAtA[i:], m.Logicalreferenced)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Logicalreferenced)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	i -= len(m.Written)
	copy(dAtA[i:], m.Written)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Written)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	i -= len(m.Refcompressratio)
	copy(dAtA[i:], m.Refcompressratio)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Refcompressratio)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	i -= len(m.Mlslabel)
	copy(dAtA[i:], m.Mlslabel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mlslabel)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	i -= len(m.Userrefs)
	copy(dAtA[i:], m.Userrefs)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Userrefs)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	i -= len(m.DeferDestroy)
	copy(dAtA[i:], m.DeferDestroy)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DeferDestroy)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	i -= len(m.Secondarycache)
	copy(dAtA[i:], m.Secondarycache)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Secondarycache)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	i -= len(m.Primarycache)
	copy(dAtA[i:], m.Primarycache)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Primarycache)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	i -= len(m.Guid)
	copy(dAtA[i:], m.Guid)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Guid)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	i -= len(m.Nbmand)
	copy(dAtA[i:], m.Nbmand)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Nbmand)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	i -= len(m.Vscan)
	copy(dAtA[i:], m.Vscan)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Vscan)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	i -= len(m.Casesensitivity)
	copy(dAtA[i:], m.Casesensitivity)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Casesensitivity)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i -= len(m.Normalization)
	copy(dAtA[i:], m.Normalization)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Normalization)))
	i--
	dAtA[i] = 0x7a
	i -= len(m.Utf8only)
	copy(dAtA[i:], m.Utf8only)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Utf8only)))
	i--
	dAtA[i] = 0x72
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.Createtxg)
	copy(dAtA[i:], m.Createtxg)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Createtxg)))
	i--
	dAtA[i] = 0x62
	i -= len(m.Setuid)
	copy(dAtA[i:], m.Setuid)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Setuid)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.Exec)
	copy(dAtA[i:], m.Exec)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Exec)))
	i--
	dAtA[i] = 0x52
	i -= len(m.Devices)
	copy(dAtA[i:], m.Devices)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Devices)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.Compressratio)
	copy(dAtA[i:], m.Compressratio)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Compressratio)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Referenced)
	copy(dAtA[i:], m.Referenced)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Referenced)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Used)
	copy(dAtA[i:], m.Used)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Used)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Creation)
	copy(dAtA[i:], m.Creation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Creation)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Parent)
	copy(dAtA[i:], m.Parent)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Parent)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Pool)
	copy(dAtA[i:], m.Pool)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Pool)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Volume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Volume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Volume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.RedundantMetadata)
	copy(dAtA[i:], m.RedundantMetadata)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RedundantMetadata)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xca
	i -= len(m.Rootcontext)
	copy(dAtA[i:], m.Rootcontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Rootcontext)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc2
	i -= len(m.Defcontext)
	copy(dAtA[i:], m.Defcontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Defcontext)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xba
	i -= len(m.Fscontext)
	copy(dAtA[i:], m.Fscontext)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Fscontext)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb2
	i -= len(m.Context)
	copy(dAtA[i:], m.Context)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Context)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xaa
	i -= len(m.Acltype)
	copy(dAtA[i:], m.Acltype)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Acltype)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa2
	i -= len(m.Snapdev)
	copy(dAtA[i:], m.Snapdev)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Snapdev)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	i -= len(m.SnapshotCount)
	copy(dAtA[i:], m.SnapshotCount)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SnapshotCount)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	i -= len(m.SnapshotLimit)
	copy(dAtA[i:], m.SnapshotLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SnapshotLimit)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x8a
	i -= len(m.FilesystemLimit)
	copy(dAtA[i:], m.FilesystemLimit)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FilesystemLimit)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x82
	i -= len(m.Volmode)
	copy(dAtA[i:], m.Volmode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Volmode)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	i -= len(m.Logicalreferenced)
	copy(dAtA[i:], m.Logicalreferenced)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Logicalreferenced)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	i -= len(m.Logicalused)
	copy(dAtA[i:], m.Logicalused)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Logicalused)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	i -= len(m.Written)
	copy(dAtA[i:], m.Written)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Written)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	i -= len(m.Refcompressratio)
	copy(dAtA[i:], m.Refcompressratio)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Refcompressratio)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	i -= len(m.Sync)
	copy(dAtA[i:], m.Sync)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Sync)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	i -= len(m.Mlslabel)
	copy(dAtA[i:], m.Mlslabel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Mlslabel)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	i -= len(m.Dedup)
	copy(dAtA[i:], m.Dedup)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Dedup)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	i -= len(m.Logbias)
	copy(dAtA[i:], m.Logbias)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Logbias)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	i -= len(m.Usedbyrefreservation)
	copy(dAtA[i:], m.Usedbyrefreservation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Usedbyrefreservation)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	i -= len(m.Usedbychildren)
	copy(dAtA[i:], m.Usedbychildren)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Usedbychildren)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	i -= len(m.Usedbydataset)
	copy(dAtA[i:], m.Usedbydataset)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Usedbydataset)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	i -= len(m.Usedbysnapshots)
	copy(dAtA[i:], m.Usedbysnapshots)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Usedbysnapshots)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	i -= len(m.Secondarycache)
	copy(dAtA[i:], m.Secondarycache)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Secondarycache)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	i -= len(m.Primarycache)
	copy(dAtA[i:], m.Primarycache)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Primarycache)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	i -= len(m.Guid)
	copy(dAtA[i:], m.Guid)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Guid)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i -= len(m.Refreservation)
	copy(dAtA[i:], m.Refreservation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Refreservation)))
	i--
	dAtA[i] = 0x7a
	i -= len(m.Copies)
	copy(dAtA[i:], m.Copies)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Copies)))
	i--
	dAtA[i] = 0x72
	i -= len(m.Readonly)
	copy(dAtA[i:], m.Readonly)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Readonly)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.Compression)
	copy(dAtA[i:], m.Compression)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Compression)))
	i--
	dAtA[i] = 0x62
	i -= len(m.Checksum)
	copy(dAtA[i:], m.Checksum)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Checksum)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.Volblocksize)
	copy(dAtA[i:], m.Volblocksize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Volblocksize)))
	i--
	dAtA[i] = 0x52
	i -= len(m.Volsize)
	copy(dAtA[i:], m.Volsize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Volsize)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.Reservation)
	copy(dAtA[i:], m.Reservation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reservation)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Compressratio)
	copy(dAtA[i:], m.Compressratio)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Compressratio)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Referenced)
	copy(dAtA[i:], m.Referenced)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Referenced)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Available)
	copy(dAtA[i:], m.Available)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Available)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Used)
	copy(dAtA[i:], m.Used)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Used)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Creation)
	copy(dAtA[i:], m.Creation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Creation)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Capacity)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AltRoot)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Health)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Guid)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BootFs)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Delegation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AutoReplace)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CacheFile)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.FailMode)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ListSnapshots)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AutoExpand)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DedupDitto)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DedupRatio)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Free)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Allocated)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Readonly)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.AShift)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Comment)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ExpandSize)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Freeing)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Fragmentation)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Leaked)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Multihost)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureAsyncDestroy)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureEmptyBpobj)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureLz4Compress)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureMultiVdevCrashDump)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureSpaceMapHistogram)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureEnabledTxg)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureHoleBirth)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureExtensibleDataset)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureEmbeddedData)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureBookmarks)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureFilesystemLimits)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureLargeBlocks)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureLargeDnode)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureSha512)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureSkein)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureEdonr)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FeatureUserobjAccounting)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Creation)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Used)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Available)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Referenced)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.CompressRatio)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Mounted)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Quota)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Reservation)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.RecordSize)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MountPoint)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SharenFs)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Checksum)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Compression)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ATime)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Devices)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Exec)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SetUid)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Zoned)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SnapDir)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.AclinHerit)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Createtxg)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.CanMount)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Xattr)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Copies)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Utf8only)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Normalization)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Casesensitivity)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Vscan)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Nbmand)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Sharesmb)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Refquota)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Refreservation)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Primarycache)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Secondarycache)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Usedbysnapshots)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Usedbydataset)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Usedbychildren)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Usedbyrefreservation)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Logbias)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Dedup)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Mlslabel)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Sync)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Dnodesize)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Refcompressratio)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Written)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Logicalused)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Logicalreferenced)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Volmode)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FilesystemLimit)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SnapshotLimit)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FilesystemCount)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SnapshotCount)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Snapdev)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Acltype)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Context)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Fscontext)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Defcontext)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Rootcontext)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Relatime)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.RedundantMetadata)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Overlay)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Encryption)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Keylocation)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Keyformat)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Pbkdf2iters)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SpecialSmallBlocks)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Size_)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Parent)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Creation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Used)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Referenced)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Compressratio)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Devices)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Exec)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Setuid)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Createtxg)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Utf8only)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Normalization)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Casesensitivity)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Vscan)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Nbmand)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Guid)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Primarycache)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Secondarycache)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.DeferDestroy)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Userrefs)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Mlslabel)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Refcompressratio)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Written)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Logicalreferenced)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Acltype)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Context)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Fscontext)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Defcontext)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Rootcontext)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *Volume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Creation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Used)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Available)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Referenced)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Compressratio)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reservation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Volsize)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Volblocksize)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Checksum)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Compression)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Readonly)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Copies)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Refreservation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Guid)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Primarycache)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Secondarycache)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Usedbysnapshots)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Usedbydataset)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Usedbychildren)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Usedbyrefreservation)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Logbias)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Dedup)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Mlslabel)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Sync)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Refcompressratio)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Written)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Logicalused)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Logicalreferenced)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Volmode)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FilesystemLimit)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SnapshotLimit)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.SnapshotCount)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Snapdev)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Acltype)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Context)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Fscontext)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Defcontext)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Rootcontext)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.RedundantMetadata)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Pool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pool{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Capacity:` + fmt.Sprintf("%v", this.Capacity) + `,`,
		`AltRoot:` + fmt.Sprintf("%v", this.AltRoot) + `,`,
		`Health:` + fmt.Sprintf("%v", this.Health) + `,`,
		`Guid:` + fmt.Sprintf("%v", this.Guid) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`BootFs:` + fmt.Sprintf("%v", this.BootFs) + `,`,
		`Delegation:` + fmt.Sprintf("%v", this.Delegation) + `,`,
		`AutoReplace:` + fmt.Sprintf("%v", this.AutoReplace) + `,`,
		`CacheFile:` + fmt.Sprintf("%v", this.CacheFile) + `,`,
		`FailMode:` + fmt.Sprintf("%v", this.FailMode) + `,`,
		`ListSnapshots:` + fmt.Sprintf("%v", this.ListSnapshots) + `,`,
		`AutoExpand:` + fmt.Sprintf("%v", this.AutoExpand) + `,`,
		`DedupDitto:` + fmt.Sprintf("%v", this.DedupDitto) + `,`,
		`DedupRatio:` + fmt.Sprintf("%v", this.DedupRatio) + `,`,
		`Free:` + fmt.Sprintf("%v", this.Free) + `,`,
		`Allocated:` + fmt.Sprintf("%v", this.Allocated) + `,`,
		`Readonly:` + fmt.Sprintf("%v", this.Readonly) + `,`,
		`AShift:` + fmt.Sprintf("%v", this.AShift) + `,`,
		`Comment:` + fmt.Sprintf("%v", this.Comment) + `,`,
		`ExpandSize:` + fmt.Sprintf("%v", this.ExpandSize) + `,`,
		`Freeing:` + fmt.Sprintf("%v", this.Freeing) + `,`,
		`Fragmentation:` + fmt.Sprintf("%v", this.Fragmentation) + `,`,
		`Leaked:` + fmt.Sprintf("%v", this.Leaked) + `,`,
		`Multihost:` + fmt.Sprintf("%v", this.Multihost) + `,`,
		`FeatureAsyncDestroy:` + fmt.Sprintf("%v", this.FeatureAsyncDestroy) + `,`,
		`FeatureEmptyBpobj:` + fmt.Sprintf("%v", this.FeatureEmptyBpobj) + `,`,
		`FeatureLz4Compress:` + fmt.Sprintf("%v", this.FeatureLz4Compress) + `,`,
		`FeatureMultiVdevCrashDump:` + fmt.Sprintf("%v", this.FeatureMultiVdevCrashDump) + `,`,
		`FeatureSpaceMapHistogram:` + fmt.Sprintf("%v", this.FeatureSpaceMapHistogram) + `,`,
		`FeatureEnabledTxg:` + fmt.Sprintf("%v", this.FeatureEnabledTxg) + `,`,
		`FeatureHoleBirth:` + fmt.Sprintf("%v", this.FeatureHoleBirth) + `,`,
		`FeatureExtensibleDataset:` + fmt.Sprintf("%v", this.FeatureExtensibleDataset) + `,`,
		`FeatureEmbeddedData:` + fmt.Sprintf("%v", this.FeatureEmbeddedData) + `,`,
		`FeatureBookmarks:` + fmt.Sprintf("%v", this.FeatureBookmarks) + `,`,
		`FeatureFilesystemLimits:` + fmt.Sprintf("%v", this.FeatureFilesystemLimits) + `,`,
		`FeatureLargeBlocks:` + fmt.Sprintf("%v", this.FeatureLargeBlocks) + `,`,
		`FeatureLargeDnode:` + fmt.Sprintf("%v", this.FeatureLargeDnode) + `,`,
		`FeatureSha512:` + fmt.Sprintf("%v", this.FeatureSha512) + `,`,
		`FeatureSkein:` + fmt.Sprintf("%v", this.FeatureSkein) + `,`,
		`FeatureEdonr:` + fmt.Sprintf("%v", this.FeatureEdonr) + `,`,
		`FeatureUserobjAccounting:` + fmt.Sprintf("%v", this.FeatureUserobjAccounting) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Creation:` + fmt.Sprintf("%v", this.Creation) + `,`,
		`Used:` + fmt.Sprintf("%v", this.Used) + `,`,
		`Available:` + fmt.Sprintf("%v", this.Available) + `,`,
		`Referenced:` + fmt.Sprintf("%v", this.Referenced) + `,`,
		`CompressRatio:` + fmt.Sprintf("%v", this.CompressRatio) + `,`,
		`Mounted:` + fmt.Sprintf("%v", this.Mounted) + `,`,
		`Quota:` + fmt.Sprintf("%v", this.Quota) + `,`,
		`Reservation:` + fmt.Sprintf("%v", this.Reservation) + `,`,
		`RecordSize:` + fmt.Sprintf("%v", this.RecordSize) + `,`,
		`MountPoint:` + fmt.Sprintf("%v", this.MountPoint) + `,`,
		`SharenFs:` + fmt.Sprintf("%v", this.SharenFs) + `,`,
		`Checksum:` + fmt.Sprintf("%v", this.Checksum) + `,`,
		`Compression:` + fmt.Sprintf("%v", this.Compression) + `,`,
		`ATime:` + fmt.Sprintf("%v", this.ATime) + `,`,
		`Devices:` + fmt.Sprintf("%v", this.Devices) + `,`,
		`Exec:` + fmt.Sprintf("%v", this.Exec) + `,`,
		`SetUid:` + fmt.Sprintf("%v", this.SetUid) + `,`,
		`Zoned:` + fmt.Sprintf("%v", this.Zoned) + `,`,
		`SnapDir:` + fmt.Sprintf("%v", this.SnapDir) + `,`,
		`AclinHerit:` + fmt.Sprintf("%v", this.AclinHerit) + `,`,
		`Createtxg:` + fmt.Sprintf("%v", this.Createtxg) + `,`,
		`CanMount:` + fmt.Sprintf("%v", this.CanMount) + `,`,
		`Xattr:` + fmt.Sprintf("%v", this.Xattr) + `,`,
		`Copies:` + fmt.Sprintf("%v", this.Copies) + `,`,
		`Utf8only:` + fmt.Sprintf("%v", this.Utf8only) + `,`,
		`Normalization:` + fmt.Sprintf("%v", this.Normalization) + `,`,
		`Casesensitivity:` + fmt.Sprintf("%v", this.Casesensitivity) + `,`,
		`Vscan:` + fmt.Sprintf("%v", this.Vscan) + `,`,
		`Nbmand:` + fmt.Sprintf("%v", this.Nbmand) + `,`,
		`Sharesmb:` + fmt.Sprintf("%v", this.Sharesmb) + `,`,
		`Refquota:` + fmt.Sprintf("%v", this.Refquota) + `,`,
		`Refreservation:` + fmt.Sprintf("%v", this.Refreservation) + `,`,
		`Primarycache:` + fmt.Sprintf("%v", this.Primarycache) + `,`,
		`Secondarycache:` + fmt.Sprintf("%v", this.Secondarycache) + `,`,
		`Usedbysnapshots:` + fmt.Sprintf("%v", this.Usedbysnapshots) + `,`,
		`Usedbydataset:` + fmt.Sprintf("%v", this.Usedbydataset) + `,`,
		`Usedbychildren:` + fmt.Sprintf("%v", this.Usedbychildren) + `,`,
		`Usedbyrefreservation:` + fmt.Sprintf("%v", this.Usedbyrefreservation) + `,`,
		`Logbias:` + fmt.Sprintf("%v", this.Logbias) + `,`,
		`Dedup:` + fmt.Sprintf("%v", this.Dedup) + `,`,
		`Mlslabel:` + fmt.Sprintf("%v", this.Mlslabel) + `,`,
		`Sync:` + fmt.Sprintf("%v", this.Sync) + `,`,
		`Dnodesize:` + fmt.Sprintf("%v", this.Dnodesize) + `,`,
		`Refcompressratio:` + fmt.Sprintf("%v", this.Refcompressratio) + `,`,
		`Written:` + fmt.Sprintf("%v", this.Written) + `,`,
		`Logicalused:` + fmt.Sprintf("%v", this.Logicalused) + `,`,
		`Logicalreferenced:` + fmt.Sprintf("%v", this.Logicalreferenced) + `,`,
		`Volmode:` + fmt.Sprintf("%v", this.Volmode) + `,`,
		`FilesystemLimit:` + fmt.Sprintf("%v", this.FilesystemLimit) + `,`,
		`SnapshotLimit:` + fmt.Sprintf("%v", this.SnapshotLimit) + `,`,
		`FilesystemCount:` + fmt.Sprintf("%v", this.FilesystemCount) + `,`,
		`SnapshotCount:` + fmt.Sprintf("%v", this.SnapshotCount) + `,`,
		`Snapdev:` + fmt.Sprintf("%v", this.Snapdev) + `,`,
		`Acltype:` + fmt.Sprintf("%v", this.Acltype) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`Fscontext:` + fmt.Sprintf("%v", this.Fscontext) + `,`,
		`Defcontext:` + fmt.Sprintf("%v", this.Defcontext) + `,`,
		`Rootcontext:` + fmt.Sprintf("%v", this.Rootcontext) + `,`,
		`Relatime:` + fmt.Sprintf("%v", this.Relatime) + `,`,
		`RedundantMetadata:` + fmt.Sprintf("%v", this.RedundantMetadata) + `,`,
		`Overlay:` + fmt.Sprintf("%v", this.Overlay) + `,`,
		`Encryption:` + fmt.Sprintf("%v", this.Encryption) + `,`,
		`Keylocation:` + fmt.Sprintf("%v", this.Keylocation) + `,`,
		`Keyformat:` + fmt.Sprintf("%v", this.Keyformat) + `,`,
		`Pbkdf2iters:` + fmt.Sprintf("%v", this.Pbkdf2iters) + `,`,
		`SpecialSmallBlocks:` + fmt.Sprintf("%v", this.SpecialSmallBlocks) + `,`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Snapshot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Snapshot{`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`Parent:` + fmt.Sprintf("%v", this.Parent) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Creation:` + fmt.Sprintf("%v", this.Creation) + `,`,
		`Used:` + fmt.Sprintf("%v", this.Used) + `,`,
		`Referenced:` + fmt.Sprintf("%v", this.Referenced) + `,`,
		`Compressratio:` + fmt.Sprintf("%v", this.Compressratio) + `,`,
		`Devices:` + fmt.Sprintf("%v", this.Devices) + `,`,
		`Exec:` + fmt.Sprintf("%v", this.Exec) + `,`,
		`Setuid:` + fmt.Sprintf("%v", this.Setuid) + `,`,
		`Createtxg:` + fmt.Sprintf("%v", this.Createtxg) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Utf8only:` + fmt.Sprintf("%v", this.Utf8only) + `,`,
		`Normalization:` + fmt.Sprintf("%v", this.Normalization) + `,`,
		`Casesensitivity:` + fmt.Sprintf("%v", this.Casesensitivity) + `,`,
		`Vscan:` + fmt.Sprintf("%v", this.Vscan) + `,`,
		`Nbmand:` + fmt.Sprintf("%v", this.Nbmand) + `,`,
		`Guid:` + fmt.Sprintf("%v", this.Guid) + `,`,
		`Primarycache:` + fmt.Sprintf("%v", this.Primarycache) + `,`,
		`Secondarycache:` + fmt.Sprintf("%v", this.Secondarycache) + `,`,
		`DeferDestroy:` + fmt.Sprintf("%v", this.DeferDestroy) + `,`,
		`Userrefs:` + fmt.Sprintf("%v", this.Userrefs) + `,`,
		`Mlslabel:` + fmt.Sprintf("%v", this.Mlslabel) + `,`,
		`Refcompressratio:` + fmt.Sprintf("%v", this.Refcompressratio) + `,`,
		`Written:` + fmt.Sprintf("%v", this.Written) + `,`,
		`Logicalreferenced:` + fmt.Sprintf("%v", this.Logicalreferenced) + `,`,
		`Acltype:` + fmt.Sprintf("%v", this.Acltype) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`Fscontext:` + fmt.Sprintf("%v", this.Fscontext) + `,`,
		`Defcontext:` + fmt.Sprintf("%v", this.Defcontext) + `,`,
		`Rootcontext:` + fmt.Sprintf("%v", this.Rootcontext) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Volume) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Volume{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Creation:` + fmt.Sprintf("%v", this.Creation) + `,`,
		`Used:` + fmt.Sprintf("%v", this.Used) + `,`,
		`Available:` + fmt.Sprintf("%v", this.Available) + `,`,
		`Referenced:` + fmt.Sprintf("%v", this.Referenced) + `,`,
		`Compressratio:` + fmt.Sprintf("%v", this.Compressratio) + `,`,
		`Reservation:` + fmt.Sprintf("%v", this.Reservation) + `,`,
		`Volsize:` + fmt.Sprintf("%v", this.Volsize) + `,`,
		`Volblocksize:` + fmt.Sprintf("%v", this.Volblocksize) + `,`,
		`Checksum:` + fmt.Sprintf("%v", this.Checksum) + `,`,
		`Compression:` + fmt.Sprintf("%v", this.Compression) + `,`,
		`Readonly:` + fmt.Sprintf("%v", this.Readonly) + `,`,
		`Copies:` + fmt.Sprintf("%v", this.Copies) + `,`,
		`Refreservation:` + fmt.Sprintf("%v", this.Refreservation) + `,`,
		`Guid:` + fmt.Sprintf("%v", this.Guid) + `,`,
		`Primarycache:` + fmt.Sprintf("%v", this.Primarycache) + `,`,
		`Secondarycache:` + fmt.Sprintf("%v", this.Secondarycache) + `,`,
		`Usedbysnapshots:` + fmt.Sprintf("%v", this.Usedbysnapshots) + `,`,
		`Usedbydataset:` + fmt.Sprintf("%v", this.Usedbydataset) + `,`,
		`Usedbychildren:` + fmt.Sprintf("%v", this.Usedbychildren) + `,`,
		`Usedbyrefreservation:` + fmt.Sprintf("%v", this.Usedbyrefreservation) + `,`,
		`Logbias:` + fmt.Sprintf("%v", this.Logbias) + `,`,
		`Dedup:` + fmt.Sprintf("%v", this.Dedup) + `,`,
		`Mlslabel:` + fmt.Sprintf("%v", this.Mlslabel) + `,`,
		`Sync:` + fmt.Sprintf("%v", this.Sync) + `,`,
		`Refcompressratio:` + fmt.Sprintf("%v", this.Refcompressratio) + `,`,
		`Written:` + fmt.Sprintf("%v", this.Written) + `,`,
		`Logicalused:` + fmt.Sprintf("%v", this.Logicalused) + `,`,
		`Logicalreferenced:` + fmt.Sprintf("%v", this.Logicalreferenced) + `,`,
		`Volmode:` + fmt.Sprintf("%v", this.Volmode) + `,`,
		`FilesystemLimit:` + fmt.Sprintf("%v", this.FilesystemLimit) + `,`,
		`SnapshotLimit:` + fmt.Sprintf("%v", this.SnapshotLimit) + `,`,
		`SnapshotCount:` + fmt.Sprintf("%v", this.SnapshotCount) + `,`,
		`Snapdev:` + fmt.Sprintf("%v", this.Snapdev) + `,`,
		`Acltype:` + fmt.Sprintf("%v", this.Acltype) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`Fscontext:` + fmt.Sprintf("%v", this.Fscontext) + `,`,
		`Defcontext:` + fmt.Sprintf("%v", this.Defcontext) + `,`,
		`Rootcontext:` + fmt.Sprintf("%v", this.Rootcontext) + `,`,
		`RedundantMetadata:` + fmt.Sprintf("%v", this.RedundantMetadata) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capacity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AltRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AltRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Health = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootFs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootFs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoReplace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoReplace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListSnapshots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListSnapshots = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoExpand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoExpand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupDitto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DedupDitto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DedupRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Free = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Readonly = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AShift", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AShift = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpandSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpandSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Freeing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Freeing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragmentation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fragmentation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leaked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multihost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multihost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureAsyncDestroy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureAsyncDestroy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureEmptyBpobj", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureEmptyBpobj = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureLz4Compress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureLz4Compress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureMultiVdevCrashDump", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureMultiVdevCrashDump = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureSpaceMapHistogram", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureSpaceMapHistogram = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureEnabledTxg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureEnabledTxg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureHoleBirth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureHoleBirth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureExtensibleDataset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureExtensibleDataset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureEmbeddedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureEmbeddedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureBookmarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureBookmarks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFilesystemLimits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFilesystemLimits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureLargeBlocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureLargeBlocks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureLargeDnode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureLargeDnode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureSha512", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureSha512 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureSkein", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureSkein = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureEdonr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureEdonr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureUserobjAccounting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureUserobjAccounting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Used = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Available = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referenced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referenced = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompressRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mounted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mounted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quota = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reservation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharenFs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharenFs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ATime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ATime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zoned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zoned = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclinHerit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AclinHerit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createtxg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Createtxg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanMount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanMount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xattr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xattr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Copies = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utf8only", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utf8only = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normalization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Normalization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Casesensitivity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Casesensitivity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vscan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vscan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nbmand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nbmand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharesmb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sharesmb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refquota", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refquota = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refreservation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refreservation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primarycache", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Primarycache = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secondarycache", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secondarycache = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usedbysnapshots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usedbysnapshots = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usedbydataset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usedbydataset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usedbychildren", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usedbychildren = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usedbyrefreservation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usedbyrefreservation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logbias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logbias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dedup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dedup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mlslabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mlslabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sync = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dnodesize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dnodesize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refcompressratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refcompressratio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Written", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Written = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logicalused", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logicalused = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logicalreferenced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logicalreferenced = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volmode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volmode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilesystemLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilesystemLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilesystemCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilesystemCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapdev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapdev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acltype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acltype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fscontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fscontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defcontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defcontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rootcontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rootcontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relatime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relatime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedundantMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedundantMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overlay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Overlay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encryption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encryption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keylocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keylocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyformat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyformat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pbkdf2iters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pbkdf2iters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialSmallBlocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialSmallBlocks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Used = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referenced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referenced = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compressratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compressratio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Setuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createtxg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Createtxg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utf8only", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utf8only = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normalization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Normalization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Casesensitivity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Casesensitivity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vscan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vscan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nbmand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nbmand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primarycache", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Primarycache = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secondarycache", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secondarycache = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferDestroy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeferDestroy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userrefs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userrefs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mlslabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mlslabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refcompressratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refcompressratio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Written", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Written = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logicalreferenced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logicalreferenced = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acltype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acltype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fscontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fscontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defcontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defcontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rootcontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rootcontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Volume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Volume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Volume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Used = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Available = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referenced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referenced = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compressratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compressratio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reservation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volsize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volsize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volblocksize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volblocksize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Readonly = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Copies = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refreservation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refreservation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primarycache", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Primarycache = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secondarycache", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secondarycache = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usedbysnapshots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usedbysnapshots = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usedbydataset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usedbydataset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usedbychildren", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usedbychildren = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usedbyrefreservation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usedbyrefreservation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logbias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logbias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dedup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dedup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mlslabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mlslabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sync = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refcompressratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refcompressratio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Written", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Written = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logicalused", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logicalused = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logicalreferenced", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logicalreferenced = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volmode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volmode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilesystemLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilesystemLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapdev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapdev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acltype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acltype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fscontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fscontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defcontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defcontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rootcontext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rootcontext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedundantMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedundantMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
